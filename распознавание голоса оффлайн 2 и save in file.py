from libs_voice import *
import sounddevice as sd
import numpy as np
from pynput import keyboard
from pynput.keyboard import Controller as Contr1, Key

def on_press(key):  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏.  # print(key )
 key = str(key).replace(" ", "")
 if key == "Key.shift_r":  #
  k.set_flag(True)
  return True
 if key == "Key.space" or key == "Key.right" or key == "Key.left" \
  or key == "Key.down" or key == "Key.up":
  k.set_flag(False)
  return True
 if key == "Key.alt":
  driver = k.get_driver()
  k.update_dict()
  return True
 else:
  return True

def on_release(key):
 pass
 return True

def start_listener():
 global listener
 listener = keyboard.Listener(on_press=on_press, on_release=on_release)
 listener.start()

subprocess.run( ["pactl", "set-source-mute", "54", "0"], check=True)# –≤–∫–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω.
start_listener()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å# driver.set_window_position(1, 505)
cache_dir = Path("/mnt/807EB5FA7EB5E954/soft/Virtual_machine/linux must have/python_linux/Project/cache")
cache_dir.mkdir(parents=True, exist_ok=True)
os.environ["XDG_CACHE_HOME"] = str(cache_dir)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
models = ["tiny", "base", "small", "medium", "large", "large-v3"]
model_name = models[5]
model_path = cache_dir / "whisper" / f"{model_name}.pt"
# –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
duration = 20  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
sample_rate = 16000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏

if model_path.exists():
    print(f"‚úÖ –ú–æ–¥–µ–ª—å '{model_name}' —É–∂–µ —Å–∫–∞—á–µ–Ω–∞: {model_path}")
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (Whisper —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫—ç—à)
    os.environ["OMP_NUM_THREADS"] = "8"    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ CPU
    os.environ["MKL_NUM_THREADS"] = "8"
    model = whisper.load_model(model_name, device="cpu")
else:
    print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω–∞ –≤: {model_path}")
    exit(0)
while 1:
 print("–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...")
 audio = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='float32')
 sd.wait()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 print("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
 with wave.open("temp.wav", 'wb') as wf: # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
   wf.setnchannels(1)
   wf.setsampwidth(2)
   wf.setframerate(sample_rate)
   wf.writeframes((audio * 32767).astype(np.int16).tobytes())

# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
 message = model.transcribe("temp.wav", fp16=False, language="ru", task="transcribe")["text"]
 if message:
  message = repeat(message)
  print(message)
  # process_text(message, k) # –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç

'''
–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ **–Ω–∞–ø—Ä—è–º—É—é —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞** –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª.
–î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É `sounddevice` –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –º–æ–¥–µ–ª—å Whisper. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫**
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã `whisper` –∏ `sounddevice`:

```bash
pip install openai-whisper sounddevice numpy
```
 2. **–ö–æ–¥ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞**
–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ –≤ –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:

```python
import whisper
import sounddevice as sd
import numpy as np
import wave

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
model = whisper.load_model("small")  # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å: tiny, base, medium, large

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
sample_rate = 16000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (16 –∫–ì—Ü)
duration = 10  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
def record_audio(duration, sample_rate):
    print("–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ!")
    audio = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='float32')
    sd.wait()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    print("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return audio

# –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
audio = record_audio(duration, sample_rate)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è Whisper
audio = (audio * 32767).astype(np.int16)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ 16-–±–∏—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
result = model.transcribe(audio, language="ru")
print("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", result["text"])
```

---

### 3. **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
1. **–ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞**:
   - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ `sounddevice` –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `float32`.
   - –ê—É–¥–∏–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ 16-–±–∏—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Whisper.

2. **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏**:
   - –ê—É–¥–∏–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –º–æ–¥–µ–ª—å Whisper —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ `transcribe`.
   - –ú–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.

3. **–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞**:
   - –ê—É–¥–∏–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫, –∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –º–æ–¥–µ–ª—å.

---

### 4. **–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Ç–æ–∫–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ)**
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä–µ—á—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–∞—Ö), –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥:

```python
import whisper
import sounddevice as sd
import numpy as np
import queue

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
model = whisper.load_model("base")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ base –∏–ª–∏ small –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
sample_rate = 16000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (16 –∫–ì—Ü)
block_size = 8000  # –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –∞—É–¥–∏–æ (0.5 —Å–µ–∫—É–Ω–¥—ã)
buffer = queue.Queue()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
def audio_callback(indata, frames, time, status):
    if status:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", status)
    buffer.put(indata.copy())

# –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
stream = sd.InputStream(samplerate=sample_rate, channels=1, callback=audio_callback, blocksize=block_size)
stream.start()

print("–ì–æ–≤–æ—Ä–∏—Ç–µ! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

try:
    while True:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –±—É—Ñ–µ—Ä–∞
        if not buffer.empty():
            audio = buffer.get()
            audio = (audio * 32767).astype(np.int16).flatten()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ 16-–±–∏—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            result = model.transcribe(audio, language="ru")
            print("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", result["text"])
except KeyboardInterrupt:
    print("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
finally:
    stream.stop()
    stream.close()
```

---

### 5. **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞**
- **–ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤**: –ê—É–¥–∏–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
- **–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏**: –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä–µ—á—å –ø–æ –º–µ—Ä–µ –µ—ë –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è.
- **–ì–∏–±–∫–æ—Å—Ç—å**: –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.).

---

### 6. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª—å `base` –∏–ª–∏ `small` –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é.
- –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±–æ–µ –∂–µ–ª–µ–∑–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å `tiny`.
- –î–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º.

---

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å! üòä
–ö–æ–Ω–µ—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞–∑–±–µ—Ä–µ–º –º–æ–¥–µ–ª–∏ Whisper, –∏—Ö —Ä–∞–∑–º–µ—Ä—ã, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

---
def donwloader():
# # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
#  model_dir = "/mnt/807EB5FA7EB5E954/—Å–æ—Ñ—Ç/–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞/linux must have/python_linux/Project/whisper_models"
#  os.makedirs(model_dir, exist_ok=True)
#
#  # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö URL-–∞–¥—Ä–µ—Å–∞
#  models = {
#     "tiny": "https://huggingface.co/openai/whisper-tiny/resolve/main/pytorch_model.bin",
#     "base": "https://huggingface.co/openai/whisper-base/resolve/main/pytorch_model.bin",
#     "small": "https://huggingface.co/openai/whisper-small/resolve/main/pytorch_model.bin",
#     "medium": "https://huggingface.co/openai/whisper-medium/resolve/main/pytorch_model.bin",
#     "large": "https://huggingface.co/openai/whisper-large/resolve/main/pytorch_model.bin",
#  }
# # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
#  for model_name, url in models.items():
#     print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
#     response = requests.get(url)
#     with open(os.path.join(model_dir, f"{model_name}.pt"), "wb") as f:
#         f.write(response.content)
#     print(f"–ú–æ–¥–µ–ª—å {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {model_dir}")
# donwloader()
### **–ú–æ–¥–µ–ª–∏ Whisper: —Ä–∞–∑–º–µ—Ä—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**
#### 1. **Tiny (~75 –ú–ë)**
- **–î–ª—è —á–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç**:
  - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–π.
  - –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).
  - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π —Å —á–µ—Ç–∫–æ–π —Ä–µ—á—å—é.
- **–¢–æ—á–Ω–æ—Å—Ç—å**: –ù–∏–∑–∫–∞—è. –ú–æ–∂–µ—Ç –ø—É—Ç–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∞–∫—Ü–µ–Ω—Ç—ã.
- **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**:
  ```python
  model = whisper.load_model("tiny")
  result = model.transcribe("–≥–æ–ª–æ—Å–æ–≤–∞—è_–∑–∞–º–µ—Ç–∫–∞.wav", language="ru")
  ```

#### 2. **Base (~150 –ú–ë)**
- **–î–ª—è —á–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç**:
  - –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
  - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ –≤–∞–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å.
- **–¢–æ—á–Ω–æ—Å—Ç—å**: –£–º–µ—Ä–µ–Ω–Ω–∞—è. –õ—É—á—à–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —à—É–º–Ω—ã–º –∞—É–¥–∏–æ, —á–µ–º `tiny`.
- **–ü—Ä–∏–º–µ—Ä**:
  ```python
  model = whisper.load_model("base")
  result = model.transcribe("–ø–æ–¥–∫–∞—Å—Ç.wav", language="ru")
  ```

#### 3. **Small (~500 –ú–ë)**
- **–î–ª—è —á–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç**:
  - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á.
  - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π, –∏–Ω—Ç–µ—Ä–≤—å—é, –∞—É–¥–∏–æ–∫–Ω–∏–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
  - –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é.
- **–¢–æ—á–Ω–æ—Å—Ç—å**: –í—ã—Å–æ–∫–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ –≤–∞–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è.
- **–ü—Ä–∏–º–µ—Ä**:
  ```python
  model = whisper.load_model("small")
  result = model.transcribe("–ª–µ–∫—Ü–∏—è_–ø–æ_–∏—Å—Ç–æ—Ä–∏–∏.wav", language="ru")
  ```

#### 4. **Medium (~1.5 –ì–ë)**
- **–î–ª—è —á–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç**:
  - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤, –∞—É–¥–∏–æ —Å —à—É–º–æ–º.
  - –¢–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–≤.
- **–¢–æ—á–Ω–æ—Å—Ç—å**: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è. –¢—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è GPU).
- **–ü—Ä–∏–º–µ—Ä**:
  ```python
  model = whisper.load_model("medium")
  result = model.transcribe("–Ω–∞—É—á–Ω—ã–π_–¥–æ–∫–ª–∞–¥.wav", language="ru")
  ```

#### 5. **Large (~3 –ì–ë)**
- **–î–ª—è —á–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç**:
  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
  - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ —Å —Ñ–æ–Ω–æ–≤—ã–º —à—É–º–æ–º, –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≥–æ–≤–æ—Ä—è—â–∏—Ö, —Ä–µ–¥–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏.
- **–¢–æ—á–Ω–æ—Å—Ç—å**: –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.
- **–ü—Ä–∏–º–µ—Ä**:
  ```python
  model = whisper.load_model("large")
  result = model.transcribe("–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è_—Å_—à—É–º–æ–º.wav", language="ru")
  ```

---

### **–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å?**
| –ö—Ä–∏—Ç–µ—Ä–∏–π               | Tiny | Base | Small | Medium | Large |
|------------------------|------|------|-------|--------|-------|
| –°–∫–æ—Ä–æ—Å—Ç—å               | ‚òÖ‚òÖ‚òÖ‚òÖ | ‚òÖ‚òÖ‚òÖ  | ‚òÖ‚òÖ    | ‚òÖ      | ‚òÜ     |
| –¢–æ—á–Ω–æ—Å—Ç—å               | ‚òÜ    | ‚òÖ‚òÖ   | ‚òÖ‚òÖ‚òÖ   | ‚òÖ‚òÖ‚òÖ‚òÖ   | ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ |
| –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∂–µ–ª–µ–∑—É    | –ù–∏–∑–∫–∏–µ | –ù–∏–∑–∫–∏–µ | –°—Ä–µ–¥–Ω–∏–µ | –í—ã—Å–æ–∫–∏–µ | –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ |
| –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è           | –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è | –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–º–æ | –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ | –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è |

---

### **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**
1. **–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö**: –ù–∞—á–Ω–∏—Ç–µ —Å `small` ‚Äî —ç—Ç–æ –∑–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞.
2. **–î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `tiny` –∏–ª–∏ `base`, —á—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –ø–∞–º—è—Ç—å.
3. **–î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏**: –í—ã–±–∏—Ä–∞–π—Ç–µ `medium` –∏–ª–∏ `large`, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å GPU.
4. **–û—Ñ—Ñ–ª–∞–π–Ω-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å –∑–∞—Ä–∞–Ω–µ–µ –∏ —É–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å:
   ```python
   model = whisper.load_model("/home/user/models/whisper-small.pt")
   ```

---

### **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á**
- **–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫** ‚Üí `tiny` –∏–ª–∏ `base`.
- **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ª–µ–∫—Ü–∏–π/–ø–æ–¥–∫–∞—Å—Ç–æ–≤** ‚Üí `small` –∏–ª–∏ `medium`.
- **–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è** ‚Üí `large`.

–ï—Å–ª–∏ –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º, –Ω–∞–ø–∏—à–∏—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å! üòä
'''