from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QComboBox, QPushButton, QLineEdit, QVBoxLayout,
    QHBoxLayout, QWidget, QScrollArea, QInputDialog, QMessageBox)
from PyQt5.QtCore import QThread
from libs_voice import *


def check(driver):
 url = driver.current_url
 driver.implicitly_wait(3)
 try:
  return 0
 except Exception as ex:
  check(driver)


f = '''#!/bin/bash
     pkill -f "chrome"
     pkill -f "chromedriver" '''
subprocess.call(['bash', '-c', f])  #
def web():
 # option = get_option()  # –í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.# option.add_argument("--headless")  # –í–∫–ª—é—á–µ–Ω–∏–µ headless-—Ä–µ–∂–∏–º–∞
 option = webdriver.ChromeOptions()
 option.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.7204.168 Safari/537.36")
 option.add_experimental_option("excludeSwitches", ['enable-automation'])  # —É–±—Ä–∞—Ç—å –æ–∫–Ω–æ
 option.add_argument("--use-fake-ui-for-media-stream")  # –∑–≤—É–∫
 option.add_argument("--disable-popup-blocking")  # –±–ª–æ–∫ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω.
 # # option.add_argument("--disable-extensions")  # –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.
 # option.add_argument('--disable-web-security')
 # option.add_argument('--disable-notifications')
 # # - –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–∏–Ω–æ–∫:
 # option.add_argument("--blink-settings=imagesEnabled=false")
 # option.binary_location = "/usr/bin/google-chrome"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
 # option.add_argument("--no-sandbox")
 # option.add_argument("--disable-blink-features=AutomationControlled")
 # option.add_argument("--incognito")
 # for dir_path in ["/tmp/chrome-profile", "/tmp/chrome-cache"]:
 #  if os.path.exists(dir_path):
 #   shutil.rmtree(dir_path, ignore_errors=True)
 # option.add_experimental_option("detach", True)
 # üßπ –°–æ–∑–¥–∞—ë–º **—á–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∂–¥—ã–π —Ä–∞–∑**
 # option.add_argument("--user-data-dir=/tmp/chrome-profile")  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
 # option.add_argument("--disk-cache-dir=/tmp/chrome-cache")
 # option.add_argument("--profile-directory=Default")
 try:
  driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=option)  # # driver.set_window_position(600, 650)
  # driver.set_window_size(624, 368) # optiol
  time.sleep(2)
  
  # driver.delete_all_cookies()  # –£–¥–∞–ª–∏—Ç—å cookies
  driver.get("https://www.speechtexter.com")  # –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç
  #  driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()),  options=option)
  # check(driver)
  # driver.minimize_window()
  WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, 'mic')))
  driver.find_element("id", "mic").click()  # –≤–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
  
  return driver
 
 except Exception as ex:  #
  print(ex)
  # driver.quit()
  # if "closed connection without response" in ex:
  #     driver.quit()
  pass
  if "code 130" in ex:
   pass
 finally:
  # print(ex)
  # driver.quit()
  pass

os.environ["QT_QPA_PLATFORM_PLUGIN_PATH"] = "/mnt/807EB5FA7EB5E954/—Å–æ—Ñ—Ç/–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞/linux must have/python_linux/Project/myenv/lib/python3.12/site-packages/PyQt5/Qt5/plugins"
pres12 = work_key()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ (–≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ + –∫–ª–∞–≤–∏—à–∞)
class CommandWidget(QWidget):
  def __init__(self, parent=None):
    super().__init__(parent)
    layout = QHBoxLayout(self)
    self.command_edit = QLineEdit()  # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    self.key_combo = QComboBox()     # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏—à–∏
    self.key_combo.addItems(KEYS.keys())
    layout.addWidget(self.command_edit)
    layout.addWidget(self.key_combo)

def press_key_function(text_to_process, words_dict):
 text = text_to_process.strip().lower()
 print(text)
 if text in words_dict: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
    key_value = words_dict[text]  # –ø–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏—à—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'C', 'F', 'key1')
    clean_key = key_value.upper().replace("KEY", "") # –£–±–∏—Ä–∞–µ–º "KEY" –∏ –¥–µ–ª–∞–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    pres12.key_press(clean_key)    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
# –ö–ª–∞—Å—Å –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
class VoiceControlThread(QThread):
 def __init__(self, words):
  super().__init__()
  self.words = words
  self.stopped = False
 def run(self):
  driver = web()# –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä.
  while not self.stopped:
   try:
 
    element = driver.find_element(By.ID, "speech-text")  # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
    text = str(element.text).lower()
    if text:  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (text –∏ self.words) –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Ç–æ–∫–∞
 
     driver.find_element("id", "mic").click()
     thread = threading.Thread(target=press_key_function, args=(text, self.words), daemon=True)
     daemon=True   # –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫).
     thread.start()
     time.sleep(1.5)
       # driver.find_element("class","p_edit dir_LTR").clear()  # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç.
     driver.find_element("id", "mic").click()
   except Exception as ex:
    print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {ex}")
 
 def stop(self):
  self.stopped = True
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class VoiceControlApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–≥—Ä–∞—Ö")
        self.setGeometry(650, 400, 580, 250)  # –†–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        self.settings_file = "settings_voice_game_control_linux.json"
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profile_combo = QComboBox()
        self.layout.addWidget(self.profile_combo)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.add_command_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
        self.del_command_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
        self.start_btn = QPushButton("–°—Ç–∞—Ä—Ç")

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–º–∞–Ω–¥
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.commands_widget = QWidget()
        self.commands_layout = QVBoxLayout(self.commands_widget)
        self.scroll_area.setWidget(self.commands_widget)
        self.layout.addWidget(self.scroll_area)

        # –ú–∞–∫–µ—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_layout = QHBoxLayout()
        buttons_layout.addWidget(self.add_command_btn)
        buttons_layout.addWidget(self.del_command_btn)
        buttons_layout.addWidget(self.start_btn)
        self.layout.addLayout(buttons_layout)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫ —Å–ª–æ—Ç–∞–º
        self.add_command_btn.clicked.connect(self.add_command)
        self.del_command_btn.clicked.connect(self.del_command)
        self.start_btn.clicked.connect(self.start_voice_control)
        self.profile_combo.currentIndexChanged.connect(self.load_profile_commands)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.profiles = {}              # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –∏—Ö –∫–æ–º–∞–Ω–¥
        self.current_profile = None     # –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        self.command_widgets = []       # –°–ø–∏—Å–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
        self.threads = []               # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        self.load_settings()            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
     
    def add_command(self):# "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å"""
        widget = CommandWidget()
        self.commands_layout.addWidget(widget)
        self.command_widgets.append(widget)

    def del_command(self):# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã"""
        if self.command_widgets:
            widget = self.command_widgets.pop()
            self.commands_layout.removeWidget(widget)
            widget.deleteLater()

    def start_voice_control(self):# –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        for thread in self.threads:
          thread.stop()        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
          thread.wait()
        self.threads.clear()

        if self.current_profile:        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è
         commands = {}
         for widget in self.command_widgets:
          command = widget.command_edit.text()
          key = widget.key_combo.currentText()
          if command and key:
           commands[command] = key
         self.profiles[self.current_profile] = commands

        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        for widget in self.command_widgets:
          words = [word.strip() for word in widget.command_edit.text().split(',') if word.strip()]
          key = widget.key_combo.currentText()
          if words and key:
           if not key:
             QMessageBox.showerror("–û—à–∏–±–∫–∞", "–ö–ª–∞–≤–∏—à–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
             return
           if not words[0]:
             QMessageBox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞")
             return
        new_dict = {}
        for key, value in commands.items():
         # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
         words = [word.strip() for word in key.split(',')]
         for word in words:
          new_dict[word] = value  # –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ ‚Üí –∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (key1, key2 –∏ —Ç.–¥.)
         
        thread = VoiceControlThread(new_dict)
        thread.start()
        self.threads.append(thread)

    def load_profile_commands(self, index):# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        if self.current_profile:
          commands = {}      # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
          for widget in self.command_widgets:
           command = widget.command_edit.text()
           key = widget.key_combo.currentText()
           if command and key:
            commands[command] = key
          self.profiles[self.current_profile] = commands

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        self.current_profile = self.profile_combo.itemText(index)

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∞–Ω–¥
        self.clear_commands()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        for command, key in self.profiles[self.current_profile].items():
          widget = CommandWidget()
          widget.command_edit.setText(command)
          widget.key_combo.setCurrentText(key)
          self.commands_layout.addWidget(widget)
          self.command_widgets.append(widget)
    def clear_commands(self):# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        while self.commands_layout.count():
            item = self.commands_layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()
        self.command_widgets.clear()

    def load_settings(self):# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ settings.json"""
      if os.path.exists(self.settings_file):
       try:
        with open(self.settings_file, "r", encoding="cp1251") as f:  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ cp1251
         data = json.load(f)
        last_profile = data.get("last_pfofile")
        self.profiles = data.get("profiles")
        for profile in self.profiles:
         self.profile_combo.addItem(profile)
        if last_profile in self.profiles:
         self.profile_combo.setCurrentText(last_profile)
         self.current_profile = last_profile
         self.load_profile_commands(self.profile_combo.currentIndex())

        self.start_voice_control()
       except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
      else:
       print("–§–∞–π–ª settings volce game contol for linux.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
       self.profiles = {"default": {}}
       self.profile_combo.addItem("default")
       self.current_profile = "default"

    def save_settings(self):#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª settings.json"""
        data = {
            "last_pfofile": self.current_profile,  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
            "profiles": self.profiles
        }
        # try:
        #     with open(self.settings_file, "w", encoding="cp1251") as f:
        #         json.dump(data, f, ensure_ascii=False, indent=2)
        # except Exception as e:
        #     print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def closeEvent(self, event): #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.threads:
            thread.stop()
            thread.wait()
        self.save_settings()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = VoiceControlApp()
    window.show()
    sys.exit(app.exec_())
